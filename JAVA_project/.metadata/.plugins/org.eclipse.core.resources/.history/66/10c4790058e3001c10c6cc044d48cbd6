package MainUI;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.Date;
import java.sql.SQLException;

import javax.swing.table.DefaultTableModel;

public class ManagerUI extends JFrame implements ActionListener {
	public DefaultTableModel userDfTable;
	public DefaultTableModel boardDfTable;
	private JButton board_update;
	private JButton board_delete;
	private JButton user_update;
	private JButton user_delete;
	public DB_Mysql useDB = new DB_Mysql(); 
	public JTable userTable;
	public JTable boardTable;
	public ManagerUI() {
		
		setTitle("ManagerGUI");
		setSize(800,800);
		setLocationRelativeTo(this);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLayout(new BorderLayout());
		
		
		
		
		JTabbedPane managerPane = new JTabbedPane();
		JPanel tab1 = new JPanel();
		tab1.setLayout(new BorderLayout());
		JPanel tab2 = new JPanel();
		tab2.setLayout(new BorderLayout());
		JPanel tab3 = new JPanel();
		
		//tab1
		
		
		String userHeader[] = new String[] {"Index","아이디","비밀번호","이름"}; 
		
		userDfTable = new DefaultTableModel(userHeader,0) {
			public boolean isCellEditable(int i, int c) {
				return false;
			} 
		};
		
		userTable = new JTable(userDfTable);	
		userTable.setRowHeight(25);
		userTable.getTableHeader().setReorderingAllowed(false);
		userTable.getTableHeader().setResizingAllowed(false);
		userTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		userTable.setPreferredScrollableViewportSize(new Dimension(700,600));
		userTable.setFillsViewportHeight(true);
		userTable.addMouseListener(new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent e) {
				
				
			}

			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
		});
		JScrollPane scrollPane = new JScrollPane(userTable);
		JPanel tab1_center = new JPanel();
		tab1_center.add(scrollPane);
		
		JPanel tab1_Bottom = new JPanel();
		tab1_Bottom.setLayout(new FlowLayout());
		user_update = new JButton("회원 추가");
		user_update.addActionListener(this);
		user_delete = new JButton("회원 삭제");
		user_delete.addActionListener(this);
		tab1_Bottom.add(user_update);
		tab1_Bottom.add(user_delete);
		
		tab1.add(tab1_Bottom,BorderLayout.SOUTH);
		tab1.add(tab1_center,BorderLayout.CENTER);
		
		
		
		
		//tab2
		String boardHeader[] = new String[] {"id","title","Content","Date","answer","answer_content"}; 
		
		boardDfTable = new DefaultTableModel(boardHeader,0) {
			public boolean isCellEditable(int i, int c) {
				return false;
			} 
		};
		
		boardTable = new JTable(boardDfTable);	
		boardTable.setRowHeight(25);
		boardTable.getTableHeader().setReorderingAllowed(false);
		boardTable.getTableHeader().setResizingAllowed(false);
		boardTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		boardTable.setPreferredScrollableViewportSize(new Dimension(700,600));
		boardTable.setFillsViewportHeight(true);
		TableRender table_rander = new TableRender();
		boardTable.setDefaultRenderer(Object.class, table_rander);
		JScrollPane scrollPane2 = new JScrollPane(boardTable);
		JPanel tab2_center = new JPanel();
		tab2_center.add(scrollPane2);
		
		JPanel tab2_Bottom = new JPanel();
		tab2_Bottom.setLayout(new FlowLayout());
		board_update = new JButton("답글 작성");
		board_update.addActionListener(this);
		board_delete = new JButton("게시물 삭제");
		board_delete.addActionListener(this);
		
		tab2_Bottom.add(board_update);
		tab2_Bottom.add(board_delete);
		
		tab2.add(tab2_Bottom,BorderLayout.SOUTH);
		tab2.add(tab2_center,BorderLayout.CENTER);
		
		
		managerPane.addTab("회원 관리",tab1);
		managerPane.addTab("게시판 관리",tab2);
		managerPane.addTab("동영상 관리",tab3);
		
		add(managerPane);
		
		
		setVisible(true);
		useDB.connectDB();
		userTableSet();
		boardTableSet();
		
		
		
		
	}
	private void boardTableSet() {
		boardDfTable.setNumRows(0);
		useDB.selectDB("SELECT * FROM DB.TB");
		try {
			System.out.println("Query OK");
			while(useDB.rs.next()) {
				String userId = useDB.rs.getString("id");
				String title = useDB.rs.getString("title");
				String Content = useDB.rs.getString("Content");
				Date date = useDB.rs.getDate("Date");
				String answer = useDB.rs.getString("answer");
				String answer_content = useDB.rs.getString("answer_Content");
				Object data[] = {userId,title,Content,date,answer,answer_content};
				boardDfTable.addRow(data);
			}
		} catch(SQLException e) {
			
			e.printStackTrace();
		}
		
	}
	
	
	public void userTableSet() {
		userDfTable.setNumRows(0);
		useDB.selectDB("SELECT * FROM DB.USER");
		try {
			System.out.println("Query OK");
			while(useDB.rs.next()) {
				
				int index = useDB.rs.getInt("index");
				String userId = useDB.rs.getString("id");
				String userPw = useDB.rs.getString("PW");
				String userName = useDB.rs.getString("userName");
				Object data[] = {index,userId,userPw,userName};
				userDfTable.addRow(data);
			}
		} catch (SQLException e) {
		
			e.printStackTrace();
		}
		
	}
	public static void main(String[] args) {
		new ManagerUI();
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		
		Object obj = e.getSource();
		
		if(obj == board_update) {
			
			int ques_row = boardTable.getSelectedRow();
			String content = (String) boardTable.getValueAt(ques_row, 2);
			String answer = (String) boardTable.getValueAt(ques_row, 5);
			new Contents_answer(this,content,answer);
		}
		else if(obj == board_delete) {
			
			int input = JOptionPane.showConfirmDialog(this, "게시글을 삭제하시겠습니까?? ","Select OptionPane....",JOptionPane.YES_NO_CANCEL_OPTION);
			if (input == 0) {
				int ques_row = boardTable.getSelectedRow();
				String title = (String) boardTable.getValueAt(ques_row, 1);
				String content = (String) boardTable.getValueAt(ques_row, 2);
				useDB.deleteBoard(title,content);
				boardDfTable.setNumRows(0);
				
				try {
					useDB.selectDB("SELECT * FROM DB.TB");
					while(useDB.rs.next()) {
						String id2 = useDB.rs.getString("id");
						String title2 = useDB.rs.getString("title");
						String content2 = useDB.rs.getString("content");
						Date date2 = useDB.rs.getDate("date");
						String answer2 = useDB.rs.getString("answer");
						String answer_content2 = useDB.rs.getString("answer_Content");
						Object data[] = {id2,title2,content2,date2,answer2,answer_content2};
						
						boardDfTable.addRow(data);
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			else if(input == 1) {
				
			}
		}
		else if(obj == user_update) {
			new addUser(this);
		}
		else if(obj ==user_delete) {
			
		}
	}
	
	
}
