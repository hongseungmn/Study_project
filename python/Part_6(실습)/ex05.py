#튜플(tuple)에 대한 실습
# 튜플의 특징 : 리스트에 반하여 변경이 불가능한 객체이다. 리스트에 비해서 속도가 빠르다.
# 튜플도 시퀀스의 일종이다.
# +, *, min(), max(), len(), cmp(), tuple() 연산과 내장함수가 사용가능하다.
#리스트는 대괄호 []요소를 감싸지만, 튜플은 ()요소로 감싼다.

colors = ("red","blue","yellow")
print(colors)
print(type(colors))

numbers = (1,2,3,4,5)
print(numbers)

#튜플도 리스트와 마찬가지로 여러가지 자료형을 섞어서 생성할 수 있다.
tuple1 = (1,2.2,"hi")
print(tuple1)

#공백 튜플 만들기
tuple2 = ()
#튜플은 한번 생성되어지면 더이상 추가, 삭제, 수정이 불가하다
#tuple2[0] = 100

# ,가 없으므로 이는 튜플이 아닌 정수형 숫자 10을 의미한다.
# 하나의 값만을 가지는 튜플을 생성할 때는 반드시 요소 뒤에 ,를 적어줘야 한다.
tuple3 = (10)
print(tuple3)

# 리스트를 내장함수인 tuple()로 튜플로 만들수 있다.
li = [1,2,3,4,5]
tuple4 = tuple(li)
print(li)
print(tuple4)

#튜플도 리스트와 마찬가지로 내장 튜플을 가질 수 있다.
t1 = (1,2.2,"반가워요")
t2 = t1,(3.3,4.4,5.5)
print(t1)
print(type(t2))

t3 = (1,2,3,"안녕")
print(len(t3))
#서로 다른 데이터 타입이 튜플의 요소로 존재한다면 비교가 되질 않는다.
#print(max(t3))

t4 = t1 + t2 # 튜플은 + 연산이 가능하다(접합)
t5 = t3 * 2  # 튜플은 * 연산이 가능하다(반복)

if 2.2 in t3: # 존재 여부를 알아봄 
    print("exsist")
    
for x in t5:
    print(x,end=" ")
    
t7 = (1,2.2,3,"안녕","철수",5.5)
print(t7[4])
print(t7[-1])
print(t7[1:])

#슬라이싱
print(t7[4:6])
print(t7[-1:-3])

#cmp 함수 사용
t1 = (1,2.2,3)
t2 = (1,2.2,3)
#cmp()함수는 이제 미지원
#print(cmp(t1,t2))

#dir() 함수는 사용할 수 있는 함수들을 출력을 해주는 역할을 하는 함수이다.
print(dir(t1))

#튜플을 비교를 하고자 한다면 __eq__()를 사용하도록 하자
print(t1.__eq__(t2))